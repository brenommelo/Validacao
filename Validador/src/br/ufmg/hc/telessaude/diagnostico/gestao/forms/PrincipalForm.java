/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.ufmg.hc.telessaude.diagnostico.gestao.forms;

import br.ufmg.hc.telessaude.component.ecg.plot.ECG12PlotPanel;
import br.ufmg.hc.telessaude.diagnostico.dominio.commons.Acao;
import br.ufmg.hc.telessaude.diagnostico.dominio.commons.PDFUtil;
import br.ufmg.hc.telessaude.diagnostico.dominio.commons.StringUtils;
import br.ufmg.hc.telessaude.diagnostico.dominio.dao.EcgAnalysDAOImpl;
import br.ufmg.hc.telessaude.diagnostico.dominio.dao.ExameDAOLocal;
import br.ufmg.hc.telessaude.diagnostico.dominio.daoImpl.ConteudoExameDAOImpl;
import br.ufmg.hc.telessaude.diagnostico.dominio.entity.Exame;
import br.ufmg.hc.telessaude.diagnostico.dominio.entity.Laudo;
import br.ufmg.hc.telessaude.diagnostico.dominio.exceptions.DAOException;
import br.ufmg.hc.telessaude.diagnostico.dominio.glasgow.EcgAnalys;
import br.ufmg.hc.telessaude.diagnostico.dominio.glasgow.ReportEcgAnalys;
import br.ufmg.hc.telessaude.exception.PDFException;
import br.ufmg.hc.telessaude.telediagnostico.xmlfactory.estrutura.LAUDO;
import br.ufmg.hc.telessaude.telediagnostico.xmlfactory.gerador.XMLFactory;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.Frame;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.event.ChangeEvent;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author paulo.gomes
 */
public class PrincipalForm extends javax.swing.JFrame {

    Exame exameSelecionado;
    Exame exameParaComparacao;
    Exame exameParaComparacao2;
    List<Exame> exames;
    LaudoForm laudoForm;
    ExameDAOLocal dao;
    ECG12PlotPanel dis;
    ECG12PlotPanel dis2;
    int tolerancia;
    private Color corPadrao = Color.BLACK;

    /**
     * Creates new form PrincipalForm
     */
    public PrincipalForm() {
        initComponents();
        this.setExtendedState(Frame.MAXIMIZED_BOTH);
        mountGrid(exames);
        dao = new ExameDAOLocal();
        cbxScala.setSelectedIndex(1);
        cbxVelocidade.setSelectedIndex(1);
        carregarExamesGrid();
        tolerancia = 0;

        spnTolerancia.addChangeListener(new javax.swing.event.ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                tolerancia = Integer.parseInt(spnTolerancia.getValue().toString());
                if (tolerancia < 0) {
                    spnTolerancia.setValue(0);
                    tolerancia = 0;
                }
                painelEspelho.remove(dis);
                painelEspelho.remove(dis2);
                abrirEspelho1();
            }
        });
        cbxScala.setVisible(false);
        cbxVelocidade.setVisible(false);
    }

    public void imprimirPDF(Exame exam, boolean printGrid) {
        try {
            int scale = Integer.parseInt(cbxScala.getSelectedItem().toString());

            float speed = Float.parseFloat(cbxVelocidade.getSelectedItem().toString());

            final PDFUtil util = new PDFUtil(exam, scale, speed, printGrid);
            //  final PDFUtil util = new PDFUtil(exam);
            final File file = new File(util.getNameFile());
            file.deleteOnExit();
            try {
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (PDFException ex) {
            java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        splitPane = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        btnBuscar = new javax.swing.JButton();
        cbxScala = new javax.swing.JComboBox();
        cbxVelocidade = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        txtExame1 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtExame2 = new javax.swing.JTextField();
        btCor = new javax.swing.JButton();
        spnTolerancia = new javax.swing.JSpinner();
        jRadioButton1 = new javax.swing.JRadioButton();
        rbtAleatorio = new javax.swing.JRadioButton();
        btnNovaComparacao = new javax.swing.JButton();
        jDesktopPane1 = new javax.swing.JDesktopPane();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        painelEspelho = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        splitPane.setDividerSize(10);
        splitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        splitPane.setOneTouchExpandable(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtros", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, null, new java.awt.Color(0, 0, 255)));

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        cbxScala.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "5", "10", "20" }));

        cbxVelocidade.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "12.5", "25", "50" }));

        jLabel7.setText("Exame base:");

        jLabel8.setText("Segundo exame:");

        btCor.setText("Cor");
        btCor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btCorActionPerformed(evt);
            }
        });

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Fixo");

        buttonGroup1.add(rbtAleatorio);
        rbtAleatorio.setText("Aletorio");

        btnNovaComparacao.setText("Novo");
        btnNovaComparacao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNovaComparacaoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(txtExame1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(cbxScala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(77, 77, 77)
                        .addComponent(cbxVelocidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(txtExame2, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnBuscar)
                .addGap(18, 18, 18)
                .addComponent(btnNovaComparacao)
                .addGap(44, 44, 44)
                .addComponent(btCor)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 88, Short.MAX_VALUE)
                .addComponent(rbtAleatorio)
                .addGap(28, 28, 28)
                .addComponent(jRadioButton1)
                .addGap(37, 37, 37)
                .addComponent(spnTolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtExame1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(txtExame2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(btnBuscar)
                    .addComponent(btCor)
                    .addComponent(rbtAleatorio)
                    .addComponent(jRadioButton1)
                    .addComponent(spnTolerancia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnNovaComparacao))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(cbxScala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(1, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cbxVelocidade, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        splitPane.setTopComponent(jPanel1);

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);

        javax.swing.GroupLayout painelEspelhoLayout = new javax.swing.GroupLayout(painelEspelho);
        painelEspelho.setLayout(painelEspelhoLayout);
        painelEspelhoLayout.setHorizontalGroup(
            painelEspelhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        painelEspelhoLayout.setVerticalGroup(
            painelEspelhoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 417, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jDesktopPane1Layout = new javax.swing.GroupLayout(jDesktopPane1);
        jDesktopPane1.setLayout(jDesktopPane1Layout);
        jDesktopPane1Layout.setHorizontalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(painelEspelho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1103, Short.MAX_VALUE))
                .addContainerGap())
        );
        jDesktopPane1Layout.setVerticalGroup(
            jDesktopPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDesktopPane1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelEspelho, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jDesktopPane1.setLayer(scrollPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jDesktopPane1.setLayer(painelEspelho, javax.swing.JLayeredPane.DEFAULT_LAYER);

        splitPane.setRightComponent(jDesktopPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(splitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 633, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        if (laudoForm != null && laudoForm.isVisible()) {
            JOptionPane.showMessageDialog(this, "Feche o visualizador primeiro para abrir novos exames");
            return;
        }
        if (evt.getClickCount() >= 2) {
            if ((exameParaComparacao2 != null) && (exameParaComparacao != null)) {
                exameParaComparacao2 = null;
                painelEspelho.remove(dis2);
                painelEspelho.remove(dis);
            }
            carregarExameSelecionado();
//            abrirExame();
        }
    }//GEN-LAST:event_tableMouseClicked
    public void carregarExamesGrid() {
        try {
            //            if (txtIdExame.getText().isEmpty() && txtNomePaciente.getText().isEmpty() && dtcInicio.getDate() == null && dtcFim.getDate() == null) {
            //                JOptionPane.showMessageDialog(this, "Informe ao menos um critério de busca");
            //                return;
            //            } else if (!txtNomePaciente.getText().isEmpty() && txtNomePaciente.getText().trim().length() <= 3) {
            //                JOptionPane.showMessageDialog(this, "Consultas por nome devem ter ao menos 3 caracteres");
            //                return;
            //            }
            exames = dao.consultar(null, null, null, null);
            //            exames = dao.consultar(txtIdExame.getText().isEmpty() ? null : Integer.parseInt(txtIdExame.getText()), txtNomePaciente.getText().trim(), dtcInicio.getDate(), dtcFim.getDate());
            mountGrid(exames);
        } catch (DAOException ex) {
            Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        if (laudoForm != null && laudoForm.isVisible()) {
            JOptionPane.showMessageDialog(this, "Feche o visualizador para buscar novos exames");
            return;
        }
        carregarExamesGrid();
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btCorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btCorActionPerformed
        corPadrao = (JColorChooser.showDialog(this, "Selecione a cor para linha padrão", Color.BLACK));
        painelEspelho.remove(dis);
        painelEspelho.remove(dis2);
        abrirEspelho1();
    }//GEN-LAST:event_btCorActionPerformed

    private void btnNovaComparacaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNovaComparacaoActionPerformed
        painelEspelho.remove(dis);
        painelEspelho.remove(dis2);
        exameSelecionado = null;
        exameParaComparacao = null;
        exameParaComparacao2 = null;
        painelEspelho.repaint();
    }//GEN-LAST:event_btnNovaComparacaoActionPerformed

    private void carregarExameSelecionado() {
        try {
            final int position = table.getSelectedRow();
            if (position >= 0) {
                exameSelecionado = (Exame) table.getValueAt(position, 0);
                exameSelecionado = dao.findById(exameSelecionado.getId());
                if (exameSelecionado != null) {
                    exameSelecionado.setConteudosExames(new ConteudoExameDAOImpl().consultarPorIdExame(exameSelecionado.getId()));
//                    exameSelecionado.setHistoricosClinicos(new HistoricoClinicoDAOImpl().consultarPorIdExame(exameSelecionado.getId()));
//                    exameSelecionado.setLaudos(new LaudoDAOLocal().consultarPorIdExame(exameSelecionado.getId()));
//                    for (Laudo laudo : exameSelecionado.getLaudos()) {
//                        laudo.setExame(exameSelecionado);
//                    }
                }
            }

            if (exameParaComparacao == null) {
                exameParaComparacao = exameSelecionado;
                txtExame1.setText(exameParaComparacao.getPaciente().getNome());
            } else if (exameParaComparacao2 == null) {
                exameParaComparacao2 = exameSelecionado;
                txtExame2.setText(exameParaComparacao2.getPaciente().getNome());

//                txtNomePaciente.setText("Processando");
//                imprimirPDF(exameParaComparacao, true);
//                imprimirPDF(exameParaComparacao2, false);
//                String nome1 = exameParaComparacao.getPaciente().getNome().replaceAll(" ", "") + ".pdf";
//                String nome2 = exameParaComparacao2.getPaciente().getNome().replaceAll(" ", "") + ".pdf";
//                new ImagemTeste(new File(nome1), new File(nome2)).setVisible(true);
//                abrirEspelho(new File(nome1), new File(nome2));
            }
                abrirEspelho1();
        } catch (DAOException ex) {
            Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void abrirEspelho1() {
        try {
            if(exameParaComparacao2!=null){
                painelEspelho.remove(dis);
            //          DisplayPanel dis = new DisplayPanel(null, false);
//            DisplayPanel dis2 = new DisplayPanel(null,true);
            dis2 = new ECG12PlotPanel(LaudoForm.processarConteudoExame(exameParaComparacao2), "", false, tolerancia, corPadrao, rbtAleatorio.isSelected());
            dis2.setBackground(new Color(0, 0, 0, 5));
            dis2.setOpaque(false);
            painelEspelho.add(dis2);
            }
            dis = new ECG12PlotPanel(LaudoForm.processarConteudoExame(exameParaComparacao), "");
            dis.setBackground(new Color(0, 0, 0, 5));
            dis.setOpaque(false);
            painelEspelho.add(dis);
            
            painelEspelho.setBackground(Color.WHITE);

        } catch (Exception ex) {
            Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void abrirEspelho(File imagemFundo, File imagemFrente) {
        DisplayPanel dis = new DisplayPanel(null, false);
        DisplayPanel dis2 = new DisplayPanel(null, true);
        dis2.setBackground(new Color(0, 0, 0, 5));
        dis.setBackground(new Color(0, 0, 0, 5));
        dis.setOpaque(false);
        dis2.setOpaque(false);
        painelEspelho.add(dis2);
        painelEspelho.add(dis);
    }

    private void abrirExame() {
        try {
            if (exameSelecionado != null) {
                this.tooglePanel();
                Laudo laudo = null;
                if (exameSelecionado.getLaudos() != null && exameSelecionado.getLaudos().size() > 0) {
                    laudo = exameSelecionado.getLaudos().get(0);
                } else {
                    laudo = new Laudo();
                    laudo.setExame(exameSelecionado);

                }
                laudoForm = new LaudoForm(jDesktopPane1, Acao.NULA, laudo, Calendar.getInstance().getTime(), this);
//                laudoForm.setReferencia(this);
            }
        } catch (Exception ex) {
            Logger.getLogger(PrincipalForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void mountGrid(List<Exame> exames) {

        final DefaultTableModel model = new DefaultTableModel(
                new Object[][]{},
                new String[]{
                    "", "NOME", "DATA DE NASCIMENTO", "DATA INCLUSÃO", "STATUS"}) {
                    Class[] types = new Class[]{
                        java.lang.Object.class, java.lang.String.class, java.lang.String.class,
                        java.lang.String.class, java.lang.String.class,};
                    boolean[] canEdit = new boolean[]{
                        false, false, false, false, false
                    };

                    @Override
                    public boolean isCellEditable(int rowIndex, int columnIndex) {
                        return false;
                    }
                };

        if (exames == null) {
            exames = new ArrayList<>();
        }

        if (exames.size() > 0) {
            for (final Exame exame : exames) {
                model.addRow(new Object[]{exame,
                    exame.getPaciente().getNome(),
                    StringUtils.format(exame.getPaciente().getDatanascimento(), StringUtils.DD_MM_YYYY),
                    StringUtils.formatDateWithTime(exame.getDatainclusao()),
                    exame.getStatus().getNome()});
            }
        }

        table.setModel(model);
        hideObjectColumn();
    }

    private void hideObjectColumn() {
        table.getColumnModel().getColumn(0).setMaxWidth(0);
        table.getColumnModel().getColumn(0).setMinWidth(0);
        table.getTableHeader().getColumnModel().getColumn(0).setMaxWidth(0);
        table.getTableHeader().getColumnModel().getColumn(0).setMinWidth(0);

    }

    public String exibirConteudo() {
        if (exameSelecionado != null) {
            try {
                EcgAnalys ecg = new EcgAnalysDAOImpl().findById(exameSelecionado.getId());
                if (ecg != null) {
                    ReportEcgAnalys.report(ecg);
                    List<String> saida = ReportEcgAnalys.getStrings();
                    StringBuilder build = new StringBuilder();
                    for (String string : saida) {
                        build.append(string);
                        build.append("\n");
                    }
                    return build.toString();
                }
            } catch (DAOException ex) {
                Logger.getLogger(GlasgowForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        return null;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PrincipalForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PrincipalForm().setVisible(true);
            }
        });
    }

    public void inserirGlasgowLaudo() {
        if (exameSelecionado != null && exameSelecionado.getLaudos().size() > 0) {
            XMLFactory<LAUDO> laudoFactory = new XMLFactory<>();
            LAUDO ld = laudoFactory.gerarEstrutura(exameSelecionado.getLaudos().get(0).getConteudo(), "UTF-8");
            String conteudo = ld.getCONTEUDO();
            conteudo += "\n\n\n Análise Glasgow:";
            conteudo += "\n\n" + this.exibirConteudo();
            ld.setCONTEUDO(conteudo);
            exameSelecionado.getLaudos().get(0).setConteudo(laudoFactory.gerarXML(ld, "UTF-8"));
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btCor;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnNovaComparacao;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox cbxScala;
    private javax.swing.JComboBox cbxVelocidade;
    private javax.swing.JDesktopPane jDesktopPane1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JPanel painelEspelho;
    private javax.swing.JRadioButton rbtAleatorio;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JSpinner spnTolerancia;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtExame1;
    private javax.swing.JTextField txtExame2;
    // End of variables declaration//GEN-END:variables

    public void tooglePanel() {
        scrollPane.setVisible(!scrollPane.isVisible());
    }
}
